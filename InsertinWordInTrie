import java.util.*;
class TrieNode
{
    char data;
    boolean isTerminating;
    TrieNode children[];
    
    public TrieNode(char data)
    {
        this.data=data;
        this.isTerminating=false;
        children=new TrieNode[26];
    }
}
public class Trie {
    
    private TrieNode root;
    
    public Trie()
    {
        root=new TrieNode('\0');
    }
    
    public static void add(TrieNode root, String word)
    {
        if(word.length()==0)
        {
            root.isTerminating=true;
            return;
        }
        int childIndex=word.charAt(0)-'a';
        TrieNode child=root.children[childIndex];
        if(child==null)
        {
            child=new TrieNode(word.charAt(0));
            root.children[childIndex]=child;
        }
        
        add(child, word.substring(1));
    }
    
    public static void add(String word)
    {
        add(root, word);
        
    }

     public static boolean search(TrieNode root, String word)
    {
        if(word.length()==0)
        {
            if(root.isTerminating)
            {
                return true;
            }
            return false;
        }
        int childIndex = word.charAt(0) - 'a';
		TrieNode child = root.children[childIndex];
		if(child == null){
			return false;
		}
        
        return search(child, word.substring(1));
    }

	public boolean search(String word){
		return search(root, word);
	}

    public static void remove(TrieNode root, String word)
    {
        if(word.length()==0)
        {
            root.isTerminating=false;
            return;
        }

        int childIndex = word.charAt(0) - 'a';
		TrieNode child = root.children[childIndex];
		if(child == null){
			return;
		}

        remove(child, word.substring(1));
    }

    public static void remove(String word){
         remove(root, word);
    }

}